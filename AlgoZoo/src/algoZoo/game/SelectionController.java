/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package algoZoo.game;

import algoZoo.challenge.ChallengeModeModel;
import algoZoo.learn.LearnModeModel;
import java.util.ArrayList;
import javax.swing.JButton;

/**
 * This class is for creating the movement options the user can choose from
 * @author DoÄŸa
 * @version 1.0
 */
public class SelectionController extends javax.swing.JPanel implements IAlgoZooView {

   // properties
   AlgoZooModel       azm;
   ArrayList<JButton> buttons;

   // constructors
   public SelectionController(AlgoZooModel azm) {
      //initialize all the components and properties
      this.azm = azm;
      buttons = new ArrayList<>();
      initComponents();
      addAllButtons();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      upButton = new javax.swing.JButton();
      downButton = new javax.swing.JButton();
      rightButton = new javax.swing.JButton();
      leftButton = new javax.swing.JButton();
      resetButton = new javax.swing.JButton();

      setOpaque(false);

      upButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/algoZoo/Icons/Buttons/Up_Button.png"))); // NOI18N
      upButton.setBorder(null);
      upButton.setContentAreaFilled(false);
      upButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            upButtonActionPerformed(evt);
         }
      });

      downButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/algoZoo/Icons/Buttons/Down_Button.png"))); // NOI18N
      downButton.setBorder(null);
      downButton.setContentAreaFilled(false);
      downButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            downButtonActionPerformed(evt);
         }
      });

      rightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/algoZoo/Icons/Buttons/Right_Button.png"))); // NOI18N
      rightButton.setBorder(null);
      rightButton.setContentAreaFilled(false);
      rightButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            rightButtonActionPerformed(evt);
         }
      });

      leftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/algoZoo/Icons/Buttons/Left_Button.png"))); // NOI18N
      leftButton.setBorder(null);
      leftButton.setContentAreaFilled(false);
      leftButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            leftButtonActionPerformed(evt);
         }
      });

      resetButton.setText("RESET");
      resetButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            resetButtonActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(56, 56, 56)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(rightButton)
               .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(leftButton)
               .addComponent(downButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(upButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(74, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(31, 31, 31)
            .addComponent(upButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(26, 26, 26)
            .addComponent(rightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(downButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(leftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(34, 34, 34)
            .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(118, Short.MAX_VALUE))
      );
   }// </editor-fold>//GEN-END:initComponents

   /**
    * Adds the movement buttons to the selection panel
    */
   private void addAllButtons() {
      buttons.add(downButton);
      buttons.add(leftButton);
      buttons.add(rightButton);
      buttons.add(upButton);
      buttons.add(resetButton);
   }

   /**
    * Adds the necessary movement to the model's movementPattern ArrayList
    * @param evt
    */
    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
       azm.addMovementPattern('w');
       if ( azm instanceof ChallengeModeModel) {
          ((ChallengeModeModel)azm).increaseNoOfMovements();
       }
       else {
          ((LearnModeModel)azm).increaseNoOfMovements();
       }
    }//GEN-LAST:event_upButtonActionPerformed

   /**
    * Adds the necessary movement to the model's movementPattern ArrayList
    * @param evt
    */
    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
       azm.addMovementPattern('s');
       if ( azm instanceof ChallengeModeModel) {
          ((ChallengeModeModel)azm).increaseNoOfMovements();
       }
       else {
          ((LearnModeModel)azm).increaseNoOfMovements();
       }
    }//GEN-LAST:event_downButtonActionPerformed

   /**
    * Adds the necessary movement to the model's movementPattern ArrayList
    * @param evt
    */
    private void rightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightButtonActionPerformed
       azm.addMovementPattern('d');
       if ( azm instanceof ChallengeModeModel) {
          ((ChallengeModeModel)azm).increaseNoOfMovements();
       }
       else {
          ((LearnModeModel)azm).increaseNoOfMovements();
       }
    }//GEN-LAST:event_rightButtonActionPerformed

   /**
    * Adds the necessary movement to the model's movementPattern ArrayList
    * @param evt
    */
    private void leftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftButtonActionPerformed
       azm.addMovementPattern('a');
       if ( azm instanceof ChallengeModeModel) {
          ((ChallengeModeModel)azm).increaseNoOfMovements();
       }
       else {
          ((LearnModeModel)azm).increaseNoOfMovements();
       }
    }//GEN-LAST:event_leftButtonActionPerformed

   /**
    * Resets the model's movementPattern ArrayList
    * @param evt
    */
    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
       azm.initNewGame();
       for (JButton b : buttons) {
          b.setEnabled(true);
       }
       if ( azm instanceof ChallengeModeModel) {
          ((ChallengeModeModel)azm).setNoOfMovements(0);
       }
       else {
          ((LearnModeModel)azm).setNoOfMovements(0);
       }
    }//GEN-LAST:event_resetButtonActionPerformed

  
   /**
    * Resets the panel for a new game
    */
   public void resetSelectionController() {
      for (JButton b : buttons) {
         b.setEnabled(true);
      }
   }
   
   /**
    * Overrides the updateView method to disable all the buttons when the game is over 
    * @param azm 
    */
    @Override
    public void updateView(AlgoZooModel azm) {
        if(azm.isGameOver())
            for (JButton b : buttons) {
         b.setEnabled(false);
      }
    }

    /**
     * Returns the ArrayList of all the buttons on the selection panel
     * @return buttons
     */
    public ArrayList<JButton> getButtons() {
      return buttons;
   }
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton downButton;
   private javax.swing.JButton leftButton;
   private javax.swing.JButton resetButton;
   private javax.swing.JButton rightButton;
   private javax.swing.JButton upButton;
   // End of variables declaration//GEN-END:variables

   
}
