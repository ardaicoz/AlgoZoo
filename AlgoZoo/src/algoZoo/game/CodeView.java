package algoZoo.game;

import algoZoo.challenge.ChallengeModeModel;
import algoZoo.learn.LearnModeModel;
import java.util.ArrayList;
import javax.swing.*;

/**
 * This class is for demonstrating the user's algorithm on a panel
 * @author Ayberk, GÃ¶rkem
 * @version 1.0
 */
public class CodeView extends javax.swing.JPanel implements IAlgoZooView {
   // properties
   private int               updated;
   private int               length;
   private JLabel            movementsView;   
   private ArrayList<JLabel> jlabels;
   
   // constructor
   /**
    * Creates a panel to demonstrate the algorithm that player created.
    */
   public CodeView() {
       //init all components
      initComponents();
      initMovementsView();
      jlabels = new ArrayList<>();
      updated = 0;
      length = 20; 
   }
   
   // methods
   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setOpaque(false);
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents
   
    /**
     * Displays the minReqMovements property and the noOfMovements properties of the model class
     */
   private void initMovementsView() {
      movementsView = new JLabel();
      movementsView.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
      movementsView.setForeground(new java.awt.Color(231, 231, 231));
      movementsView.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
      movementsView.setMaximumSize(new java.awt.Dimension(50, 15));
      movementsView.setMinimumSize(new java.awt.Dimension(50, 15));
      movementsView.setPreferredSize(new java.awt.Dimension(50, 15));
      add(movementsView);
      movementsView.setBounds(160, 0, 40, 20);
   }
   
   /**
    * Returns length property
    * @return length 
    */
   public int getLength() {
       return length;
   }
   
   @Override
   /**
    * Overrides updateView method of IAlgoZooView interface to demonstrate the user's algorithm
    */
   public void updateView(AlgoZooModel azm) {
      //if the model class is an instance of ChallengeModeModel
      if ( azm instanceof ChallengeModeModel) {
         if ( ((ChallengeModeModel) azm).getMinRequiredMovements() < azm.getMovementPattern().size()) {
            movementsView.setForeground(new java.awt.Color(177, 0, 0));
         }
         
         movementsView.setText(azm.getMovementPattern().size() + "/" + ((ChallengeModeModel) azm).getMinRequiredMovements());
      }
      //if the model class is an instance of LearnModeModel
      else if ( azm instanceof LearnModeModel) {
         if ( ((LearnModeModel) azm).getMinRequiredMovements() < azm.getMovementPattern().size()) {
            movementsView.setForeground(new java.awt.Color(177, 0, 0));
         }
         
         movementsView.setText(azm.getMovementPattern().size() + "/" + ((LearnModeModel) azm).getMinRequiredMovements());
      }
      //check if the movementPattern ArrayList of the model is empty
      if ( azm.getMovementPattern().isEmpty()) {
         for ( int i = 0; i < jlabels.size(); i++) {
            this.remove(jlabels.get(i));
         }
         jlabels.removeAll(jlabels);
         this.repaint();
         updated = 0;
         movementsView.setForeground(new java.awt.Color(231, 231, 231));
         length = 20;
      }
      else {
         for ( int i = updated; i < azm.getMovementPattern().size(); i++) {
            //if next movement is "up"
            if ( azm.getMovementPattern().get(i).equals('w')) {
               jlabels.add(new JLabel());
               add(jlabels.get(jlabels.size() - 1));
               jlabels.get(jlabels.size() - 1).setIcon(new ImageIcon(getClass().getResource("/algoZoo/Icons/Buttons/Up_Button.png")));
               if ( jlabels.size() >= 2) {
                  jlabels.get(jlabels.size() -1).setBounds(82, jlabels.get(jlabels.size()-2).getHeight() + jlabels.get(jlabels.size()-2).getY() + 10, 36, 50);
                  length += 60;
               }
               else {
                  jlabels.get(jlabels.size() - 1).setBounds(82,20,36,50);
                  length += 50;
               }
               updated++;
            }
            //if next movement is "left"
            else if ( azm.getMovementPattern().get(i).equals('a')) {
               jlabels.add(new JLabel());
               add(jlabels.get(jlabels.size() - 1));
               jlabels.get(jlabels.size() - 1).setIcon(new ImageIcon(getClass().getResource("/algoZoo/Icons/Buttons/Left_Button.png")));
               if ( jlabels.size() >= 2) {
                  jlabels.get(jlabels.size() -1).setBounds(75, jlabels.get(jlabels.size()-2).getHeight() + jlabels.get(jlabels.size()-2).getY() + 10, 50, 36);
                  length += 46;
               }
               else {
                  jlabels.get(jlabels.size() - 1).setBounds(75,20,50,36);
                  length += 36;
               }
               updated++;
            }
            //if next movement is "down"
            else if ( azm.getMovementPattern().get(i).equals('s')) {
               jlabels.add(new JLabel());
               add(jlabels.get(jlabels.size() - 1));
               jlabels.get(jlabels.size() - 1).setIcon(new ImageIcon(getClass().getResource("/algoZoo/Icons/Buttons/Down_Button.png")));
               if ( jlabels.size() >= 2) {
                  jlabels.get(jlabels.size() -1).setBounds(82, jlabels.get(jlabels.size()-2).getHeight() + jlabels.get(jlabels.size()-2).getY() + 10, 36, 50);
                  length += 60;
               }
               else {
                  jlabels.get(jlabels.size() - 1).setBounds(82,20,36,50);
                  length += 50;
               }
               updated++;
            }
            //if next movement is "right"
            else if ( azm.getMovementPattern().get(i).equals('d')) {
               jlabels.add(new JLabel());
               add(jlabels.get(jlabels.size() - 1));
               jlabels.get(jlabels.size() - 1).setIcon(new ImageIcon(getClass().getResource("/algoZoo/Icons/Buttons/Right_Button.png")));
               if ( jlabels.size() >= 2) {
                  jlabels.get(jlabels.size() -1).setBounds(75, jlabels.get(jlabels.size()-2).getHeight() + jlabels.get(jlabels.size()-2).getY() + 10, 50, 36);
                  length += 46;
               }
               else {
                  jlabels.get(jlabels.size() - 1).setBounds(75,20,50,36);
                  length += 36;
               }
               updated++;
            }
            //if next movement is "gather pollens"
            else if (azm.getMovementPattern().get(i).equals('f')) {
               jlabels.add(new JLabel());
               add(jlabels.get(jlabels.size() - 1));
               jlabels.get(jlabels.size() - 1).setIcon(new ImageIcon(getClass().getResource("/algoZoo/Icons/Buttons/Flower.png")));
               if ( jlabels.size() >= 2) {
                  jlabels.get(jlabels.size() -1).setBounds(76, jlabels.get(jlabels.size()-2).getHeight() + jlabels.get(jlabels.size()-2).getY() + 10, 48, 60);
                  length += 70;
               }
               else {
                  jlabels.get(jlabels.size() - 1).setBounds(76,20,48,60);
                  length += 60;
               }
               updated++;
               
            }
            
         }
      }
      
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
