/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package algoZoo.challenge;

import algoZoo.game.*;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;

/**
 * This class is for basic GUI design of Challenge Mode 
 * @author Doğa, Esra, Alp
 * @version 1.0
 */
public class ChallengeModeGUI extends javax.swing.JPanel {

   // properties
   MapView                    mapView;
   CodeView                   codeView;
   TimerController            timer;
   ChallengeLevels            currentLevel;
   ChallengeModeModel         cmm; 
   SelectionController        selectionController;
   ArrayList<ChallengeLevels> levelContainer;

   /**
    * Creates new form ChallengeModeGUI
    */
   public ChallengeModeGUI() {
      //Initialize all components
      initMyComponents();
      initComponents();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playButton = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setLayout(null);

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/algoZoo/Icons/Buttons/Play_Game_Button.png"))); // NOI18N
        playButton.setBorder(null);
        playButton.setContentAreaFilled(false);
        playButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        add(playButton);
        playButton.setBounds(1005, 335, 80, 70);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/algoZoo/Backgrounds/In_Game_Background.png"))); // NOI18N
        add(background);
        background.setBounds(0, 0, 1400, 800);
    }// </editor-fold>//GEN-END:initComponents

   private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
      getModel().play(); //sends a message to model to move the animal according to the movement algorithm
      for (JButton b : selectionController.getButtons()) {
         b.setEnabled(false);
      }
      playButton.setEnabled(false); //disables all the buttons so that level cannot be played again
   }//GEN-LAST:event_playButtonActionPerformed

   /**
    * Method for initializing custom made components
    */
   private void initMyComponents() {
      // initialize components  
      initLevels();
      currentLevel = levelContainer.get(0);
      cmm = new ChallengeModeModel(currentLevel.getStartX(), currentLevel.getStartY(), currentLevel.getFinishX(), currentLevel.getFinishY(), currentLevel.getMinRequiredMovements(), currentLevel.getMinRequiredTime(), currentLevel.getFlowers());
      mapView = new MapView(cmm);
      codeView = new CodeView();
      selectionController = new SelectionController(cmm);
      timer = new TimerController(cmm);
      
      initNewLevel(); //initialize a new level
      mapView.getMapBackground().setIcon(currentLevel.getMapBackground()); //set the map

      // place components to panel and setVisible
      add(mapView);
      mapView.setBounds(50, 50, 640, 640);
      add(codeView);
      codeView.setBounds(845, 50, 200, 640);
      add(selectionController);
      selectionController.setBounds(1200, 0, 200, 800);
      add(timer);
      timer.setBounds(306, 720, 150, 70);

      // add required views 
      cmm.addView(mapView);
      cmm.addView(codeView);
      cmm.addView(selectionController);
   }

   /**
    * Initialize all the levels for Challenge Mode with setting required properties
    */
   public void initLevels() {
      ChallengeLevels level1 = new ChallengeLevels(8, 12, 72, 76, 2, 10, new ImageIcon(getClass().getResource("/algoZoo/Maps/LearnMode/Level1.png")), 1);
      ChallengeLevels level2 = new ChallengeLevels(136, 76, 72, 76, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/LearnMode/Level2.png")), 2);
      ChallengeLevels level3 = new ChallengeLevels(8, 12, 72, 76, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/LearnMode/Level3.png")), 3);
      ChallengeLevels level4 = new ChallengeLevels(8, 12, 72, 76, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/LearnMode/Level4.png")), 4);
      ChallengeLevels level5 = new ChallengeLevels(8, 12, 72, 76, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/LearnMode/Level5.png")), 5);
      ChallengeLevels level6 = new ChallengeLevels(8, 12, 72, 76, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/LearnMode/Level6.png")), 6);
      ChallengeLevels level7 = new ChallengeLevels(8, 12, 72, 76, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/LearnMode/Level7.png")), 7);
      ChallengeLevels level8 = new ChallengeLevels(8, 12, 72, 76, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/LearnMode/Level8.png")), 8);
      ChallengeLevels level9 = new ChallengeLevels(8, 12, 72, 76, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/LearnMode/Level9.png")), 9);
      ChallengeLevels level10 = new ChallengeLevels(8, 12, 72, 76, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/LearnMode/Level10.png")), 10);

      //add all the levels to an ArrayList
      levelContainer = new ArrayList<>();
      levelContainer.add(level1);
      levelContainer.add(level2);
      levelContainer.add(level3);
      levelContainer.add(level4);
      levelContainer.add(level5);
      levelContainer.add(level6);
      levelContainer.add(level7);
      levelContainer.add(level8);
      levelContainer.add(level9);
      levelContainer.add(level10);
   }

   /**
    * Method for starting the timer
    */
   public void startTimer() {
      timer.startTimer();
   }

   /**
    * Inıtializes new level by getting information from the currentLevel property
    */
   public void initNewLevel() {
      cmm.setStartX(currentLevel.getStartX());
      cmm.setStartY(currentLevel.getStartY());
      cmm.setFinishX(currentLevel.getFinishX());
      cmm.setFinishY(currentLevel.getFinishY());
      cmm.setMinRequiredMovements(currentLevel.getMinRequiredMovements());
      cmm.setMinRequiredTime(currentLevel.getMinRequiredTime());
      mapView.getMapBackground().setIcon(currentLevel.getMapBackground());
   }

   /**
    * Determines which level will start.
    * @param level level number.
    */
   public void setCurrentLevel(int level) {
      currentLevel = levelContainer.get(level - 1);
      initNewLevel();
   }

   /**
    * Initializes new game
    */
   public void initNewGame() {
      cmm.initNewGame();
      timer.resetTimer();
      selectionController.resetSelectionController();
   }

   /**
    * Returns the model class
    * @return cmm
    */
   public ChallengeModeModel getModel() {
      return cmm;
   }
   
   /**
    * Sets the animal according to the parametre
    * @param animal 
    */
   public void setAnimal(Animal animal) {
       cmm.setAnimal(animal);
   }
   
   /**
    * Returns the efficiency of the current level
    * @return cmm.getEfficiency()
    */
   public int getEfficiency() {
       return cmm.getEfficiency();
   }
   
   public int getLevel() {
      return currentLevel.getLevel();
   }
   
   /**
    * Method for stopping the timer
    */
   public void stopTimer() {
       timer.stopTimer();
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JButton playButton;
    // End of variables declaration//GEN-END:variables
}
