/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package algoZoo.challenge;

import algoZoo.game.*;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;

/**
 * This class is for basic GUI design of Challenge Mode 
 * @author DoÄŸa, Esra, Alp
 * @version 1.0
 */
public class ChallengeModeGUI extends javax.swing.JPanel {

   // properties
   MapView                    mapView;
   CodeView                   codeView;
   TimerController            timer;
   ChallengeLevels            currentLevel;
   ChallengeModeModel         cmm; 
   SelectionController        selectionController;  
   ChallengeLevelsContainer  challengeLevelsContainer;

   /**
    * Creates new form ChallengeModeGUI
    */
   public ChallengeModeGUI() {
      //Initialize all components
      initMyComponents();
      initComponents();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playButton = new javax.swing.JButton();
        retryButton = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setLayout(null);

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/algoZoo/Icons/Buttons/Play_Game_Button.png"))); // NOI18N
        playButton.setBorder(null);
        playButton.setContentAreaFilled(false);
        playButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        add(playButton);
        playButton.setBounds(1005, 335, 80, 70);

        retryButton.setText("RETRY");
        retryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retryButtonActionPerformed(evt);
            }
        });
        add(retryButton);
        retryButton.setBounds(0, 0, 83, 29);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/algoZoo/Backgrounds/In_Game_Background.png"))); // NOI18N
        add(background);
        background.setBounds(0, 0, 1400, 800);
    }// </editor-fold>//GEN-END:initComponents

   private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
      getModel().play(); //sends a message to model to move the animal according to the movement algorithm
      for (JButton b : selectionController.getButtons()) {
         b.setEnabled(false);
      }
      selectionController.getForButton().setEnabled(false);
      playButton.setEnabled(false); //disables all the buttons so that level cannot be played again
      if ( cmm.getMovementPattern().isEmpty()) {
          mapView.endMessage();
      }
   }//GEN-LAST:event_playButtonActionPerformed

    private void retryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retryButtonActionPerformed
     cmm.resetMovementPattern();
     if ( cmm.getAnimal().getName().equals("Bee")){
        cmm.getAnimal().setIcon(new ImageIcon(getClass().getResource("/algoZoo/Icons/Animals/Bee_Right.png")));         
      }
     else if ( cmm.getAnimal().getName().equals("Butterfly")){
         cmm.getAnimal().setIcon(new ImageIcon(getClass().getResource("/algoZoo/Icons/Animals/Butterfly_Right.png")));               
      }
      cmm.setCurrentX(cmm.getStartX());
      cmm.setCurrentY(cmm.getStartY());
      cmm.setGameOver(false);
      cmm.update();
      mapView.resetMap();
      timer.resetTimer();
      selectionController.resetSelectionController();
      playButton.setEnabled(true);
      initNewLevel();
    }//GEN-LAST:event_retryButtonActionPerformed

   /**
    * Method for initializing custom made components
    */
   private void initMyComponents() {
      // initialize components  
      initLevels();
      currentLevel = challengeLevelsContainer.get(0);
      cmm = new ChallengeModeModel(currentLevel.getStartX(), currentLevel.getStartY(), currentLevel.getFinishX(), currentLevel.getFinishY(), currentLevel.getMinRequiredMovements(), currentLevel.getMinRequiredTime(), currentLevel.getFlowers());
      
      mapView = new MapView(cmm);
      codeView = new CodeView();
      selectionController = new SelectionController(cmm);
      timer = new TimerController(cmm);
      
      initNewLevel(); //initialize a new level
      mapView.getMapBackground().setIcon(currentLevel.getMapBackground()); //set the map

      // place components to panel and setVisible
      add(mapView);
      mapView.setBounds(50, 50, 640, 640);
      add(codeView);
      codeView.setBounds(845, 50, 200, 640);
      add(selectionController);
      selectionController.setBounds(1200, 0, 200, 800);
      add(timer);
      timer.setBounds(306, 720, 128, 50);

      // add required views 
      cmm.addView(mapView);
      cmm.addView(codeView);
      cmm.addView(selectionController);
      cmm.addView(selectionController.getForView());
   }

   /**
    * Initialize all the levels for Challenge Mode with setting required properties
    */
   public void initLevels() {
      ChallengeLevels level1 = new ChallengeLevels(6, 8, 3, 5, 2, 10, new ImageIcon(getClass().getResource("/algoZoo/Maps/ChallengeMode/Level1.png")), 1, true);
      ChallengeLevels level2 = new ChallengeLevels(6, 9, 5, 6, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/ChallengeMode/Level2.png")), 2, false);
      ChallengeLevels level3 = new ChallengeLevels(4, 7, 6, 6, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/ChallengeMode/Level3.png")), 3, false);
      ChallengeLevels level4 = new ChallengeLevels(6, 6, 8, 5, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/ChallengeMode/Level4.png")), 4, false);
      ChallengeLevels level5 = new ChallengeLevels(2, 9, 8, 9, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/ChallengeMode/Level5.png")), 5, false);
      ChallengeLevels level6 = new ChallengeLevels(4, 7, 8, 7, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/ChallengeMode/Level6.png")), 6, false);
      ChallengeLevels level7 = new ChallengeLevels(8, 7, 2, 4, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/ChallengeMode/Level7.png")), 7, false);
      ChallengeLevels level8 = new ChallengeLevels(4, 7, 4, 3, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/ChallengeMode/Level8.png")), 8, false);
      ChallengeLevels level9 = new ChallengeLevels(5, 9, 7, 5, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/ChallengeMode/Level9.png")), 9, false);
      ChallengeLevels level10 = new ChallengeLevels(1, 1, 2, 2, 10, 120, new ImageIcon(getClass().getResource("/algoZoo/Maps/ChallengeMode/Level1.png")), 10, false);

      // Set flowers
      ArrayList<Flower> flowerContainer = new ArrayList<>();
      //level1.setFlowers(flowerContainer); 
      
      //add all the levels to an ArrayList
      challengeLevelsContainer = new ChallengeLevelsContainer();
      challengeLevelsContainer.add(level1);
      challengeLevelsContainer.add(level2);
      challengeLevelsContainer.add(level3);
      challengeLevelsContainer.add(level4);
      challengeLevelsContainer.add(level5);
      challengeLevelsContainer.add(level6);
      challengeLevelsContainer.add(level7);
      challengeLevelsContainer.add(level8);
      challengeLevelsContainer.add(level9);
      challengeLevelsContainer.add(level10);
      ChallengeLevelsSave.save(challengeLevelsContainer);
   }

   /**
    * Method for starting the timer
    */
   public void startTimer() {
      timer.startTimer();
   }

   /**
    * Initializes new level by getting information from the currentLevel property
    */
   public void initNewLevel() {
      cmm.setStartX(currentLevel.getStartX());
      cmm.setStartY(currentLevel.getStartY());
      cmm.setFinishX(currentLevel.getFinishX());
      cmm.setFinishY(currentLevel.getFinishY());
      cmm.setMinRequiredMovements(currentLevel.getMinRequiredMovements());
      cmm.setMinRequiredTime(currentLevel.getMinRequiredTime());
      mapView.getMapBackground().setIcon(currentLevel.getMapBackground());
   }

   /**
    * Determines which level will start.
    * @param level level number.
    */
   public void setCurrentLevel(int level) {
      currentLevel = challengeLevelsContainer.get(level - 1);
      initNewLevel();
   }

   /**
    * Initializes new game
    */
   public void initNewGame() {
      cmm.initNewGame();
      mapView.resetMap();
      timer.resetTimer();
      selectionController.resetSelectionController();
      playButton.setEnabled(true);
   }

   /**
    * Returns the model class
    * @return cmm
    */
   public ChallengeModeModel getModel() {
      return cmm;
   }
   
   /**
    * Sets the animal according to the parametre
    * @param animal 
    */
   public void setAnimal(Animal animal) {
       cmm.setAnimal(animal);
   }
   
   /**
    * Returns the efficiency of the current level
    * @return cmm.getEfficiency()
    */
   public int getEfficiency() {
       return cmm.getEfficiency();
   }
   
   public int getLevel() {
      return currentLevel.getLevel();
   }
   
   /**
    * Method for stopping the timer
    */
   public void stopTimer() {
       timer.stopTimer();
   }
   
   public boolean isBeeMoving() {
       return mapView.isBeeMoving();
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JButton playButton;
    private javax.swing.JButton retryButton;
    // End of variables declaration//GEN-END:variables
}
